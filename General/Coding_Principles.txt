Данные принципы написания кода являются основопологающими для любого проекта на любом языке программирования.
Также существует возможность нарушение одного или нескольких из этих принципов в особых случаях, так как программисту
не всегда удаётся найти и удержать "золотую середину".
DRY (don't repeat yourself) - не повторяйся
Данный принцип говорит о том, что многократно повторяющиеся участки кода следует заменять более компактным и легко
читаемым.
С помощью данного принципа мы:
- Улучшаем читаемость кода, из-за сокращения его размеров
- Повышаем качество и удобство поддержки кода в рабочем состоянии, если нужно будет что-нибудь заменить.


YAGNI (You aren't gonna need it) - это не понадобится
Данный принцип говорит о том, что не нужно стараться сделать множество функций которые, в конечном итоге, не будут
использованы в нашей программе.
С помощью данного принципа мы:
- Уменьшаем количество строк кода засчёт избавления от неиспользуемых функций в нашем классе/модуле/сервисе и т.д.


KISS (keep it simple, stupid) - будь проще
Данный принцип говорит о том, что если существует встроенная функция или библиотека, которые способны уменьшить
количество кода в нашей программе и реализовать наш функционал, то следует её использовать.


POLA (Principle of least Astonishment) - не удивляй пользователя
Данный принцип говорит о том, что не следует использовать ненужные функции в нашем классе и, (или) программе,
если они не относятся к логике данной программы, или реализовывают её функционал не должным образом.


EAFP (Easier to ask for forgiveness than permission) - проще извиниться, чем просить разрешение(сначала действуй)
Данный принцип говорит о том, что если возникает исключение, перехватить его и разобраться с ним позже.
Следование данному принципу часто называют оптимистическим взглядом на код.


LBYL (Look before you leap) - смотри, прежде чем прыгнуть(сначала спроси)
Данный принцип говорит о том, что следует изначально проверить код на наличие различных исключений и только потом
выполнить его.
