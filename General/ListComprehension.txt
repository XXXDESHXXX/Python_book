List Comprehension используется только для заполнения или фильтрации списка или другой структуры даных.
Синтаксис List comprehension устроен следующим образом:
Для списков:
new_list = [выражение for элемент in последовательность if условие]
Для кортежей:
tuple(выражение for элемент in последовательность if условие)
Для словарей:
new_dict = { ключ:значение for (ключ,значение) in dict.items() if условие }
Для множеств:
new_set = { выражение for элемент in последовательность if условие }
Использование list comps не является всегда лучшим решением. При сравнении list comps с обычным циклом, производительность
list comps выше всего на 10%, поэтому разработчику всегда стоит думать не об увелечении производительности а об улучшении читабельности кода.

1. Генэксп вернет объект, а не коллекцию! при создании объекта он проверит источник, что может быть критично, если это какая то функция. Если источник не валидный то ошибка упадет при создании генератора, а не при попытке получить значение
2. Генэксп ленивый, то есть ничего не делает и не занимает память пока не потребуется значение. Сгенерировав значение снова засыпает пока опять не попросят новое.
3. Генэксп одноразовый, при исчерпании начинает бросать исключение, которое мы не увидим, если используем генератор в цикле for
4. Генэксп может потенциально генерировать бесконечные последовательности, но он ничего не знает о порядке элементов или о их количестве (нет len)