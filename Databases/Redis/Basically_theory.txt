Redis - это продвинутая база данных в формате ключ-значение, позволяющая хранить различные типы данных.
SQL подходит для постоянного хранения данных, Redis для быстро меняющихся.
В Redis по умолчанию используется порт 6379.
С помощью следующей ниже команды можно установить соединение с базой данных Redis в оболочке Python.
import redis
r = redis.Redis(host='localhost', port=6379, db=0)
В Redis базы даннных идентифицируются по целочисленному индексу, а не по имени базы данных.
По умолчанию клиент подключается к базе данных 0. Число доступных баз данных, на которое Redis рассчитан изначально 16, но это значение можно изменить
в файле redis.conf.
При именовании ключей Redis знак двоеточия используется в качестве разделителя для создания ключей в именном пространстве. Благодаря этому имена ключей
становятся весьма подробными, а родственные ключи имеют в своих именах общие части одной и той же схемы.

Когда стоит применять Redis:
- Подсчёт количеств: Команды incr() и incrby() можно использовать для подсчёта элементов.
- Хранение последних элементов: с помощью команд lpush() и rpush() можно добавлять элементы в начало/конец списка. Длину обрезать - ltrim(). Удаление и возврат - lpop()/rpop().
- Очереди: Redis также может блокировать команды очереди.
- Кеширование: С помощью команд expire() и expireat().
- Публикация/подписка: В Redis есть различные команды для подписки/отписки и отправки сообщений в каналы.
- Рейтинги и списки лидеров: Сортированные множества Redis позволяют очень легко создавать списки лидеров.
Отслеживание в режиме реального времени: Благодаря быстрому вводу-выводу Redis для этого идельно подходит.
Уровни кеша:
Низкоуровеневый API кеша: обеспечивает высочайшую степень гранулярности. Позволяет кешировать конкретные запросы или вычисления;
Кеш шаблона: позволяет кешировать фрагменты шаблона.
Кеш представлений: обеспечивает кеширование отдельных представлений.
Сайтовый кеш: кеш самого высокого уровня. Он кеширует весь сайт.