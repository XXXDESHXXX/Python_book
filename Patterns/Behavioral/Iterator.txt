Итератор - это поведенческий паттерн проектирования, который даёт возможность последовательно обходить элементы составных объектов, не раскрывая их внутреннего представления.
Проблема, которую решает:
Коллекции - это набор объектов, собранных в кучу по каким-то критериям. Хоть большинство коллекций и являются обычным списком элементов, но
существуют и экзотические коллекции построенные на основе деревьев, графов и других сложных структур данных.

Основной вопрос решаемый паттерном итератор звучит так: Каким способом следует перемещаться по сложной структуре данных?
Например, сегодня достаточно обхода в глубину, завтра понадобится в ширину, а потом в случайном порядке.

Добавляя всё новые алгоритмы в код коллекции, вы понемногу размываете её основную задачу, которая заключается в эффективном хранении данных.
Решение:
Идея паттерна Итератор состоит в том, чтобы вынести поведение обхода коллекции из самой коллекции в отдельный класс.
Объект-итератор будет отслеживать состояние обхода, текущую позицию в коллекции и сколько элементов ещё осталось обойти.
ВАЖНО!!!! ОДНУ И ТУ ЖЕ КОЛЛЕКЦИЮ СМОГУТ ОДНОВРЕМЕННО ОБОЙТИ РАЗЛИЧНЫЕ ИТЕРАТОРЫ, А САМА КОЛЛЕКЦИЯ НЕ БУДЕТ ДАЖЕ ЗНАТЬ ОБ ЭТОМ.!!!!