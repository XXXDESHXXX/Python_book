Цепочка обязанностей - это поведенческий паатерн, который позволяет передавать запросы последовательно по цепочке обработчиков.
Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи
Проблема:
У нас есть система приёма онлайн-заказов. Нужно ограничить доступ так, чтобы только авторизованные пользователи могли создавать заказы.
Кроме того, определённые пользователи, владеющие правами администратора, должны иметь полный доступ к заказам.

Такие проверки необходимо выполнять последовательно. На протяжении долгого времени вы добавляли всё больше и больше последовательных проверок.
С каждой новой фичей код проверок всё больше и больше раздувался из-за условных операторов. При изменении одного правила приходилось трогать код всех проверок.


Решение:
Каждая проверка должна переехать в отдельный класс с единственным методом выплонения. Данные запроса, над которым происходит проверка, будут передаваться в метод как аргументы.
Самый важный этап заключается в том, что паттерн предлагает связать объекты обработчиков в одну цепь. Каждый из них будет иметь ссылку на следующий обработчик в цепи.
Таким образом каждый обработчик сможет не только сам что-то сделать с запросом, но и передать обработку следующему объекту в цепочке.
Плюсы такого решения:
Длина цепочки не имеет никакого значения.
Обработчик не обязательно должен передавать запрос дальше.

Обработчики прерывают дальнейшие проверки, если текущая проверка не прошла.
Но возможно, чтобы обработчики прерывали цепь только в том случае, когда они могут обработать запрос, в этом случае запрос движется по цепи, пока не найдётся обработчик, который может его обработать.

!!! Очень важно, чтобы все объекты цепочки имели общий интерфейс!!!
Обычно каждому обработчику достаточно знать только то, что следующий объект в цепи имеет метод выполнить.