Одиночка - это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.
Проблема:
Одиночка решает две проблемы, нарушая принцип единственной ответственности класса.
1. Гарантирует наличие единственного экземпляра класса. Чаще всего это полезно для доступа к какому-то общему ресурсу, например, базе данных.
Например, вы создали объект, а через некоторое время пробуете создать ещё один. В этом случае вы хотите получить старый объект, вместо нового.

Но такое поведение невозможно, так как конструктор класса ВСЕГДА возвращает новый объект.

2. Предоставляет глобальную точку доступа.
Это не просто глобальная переменная, через которую можно достучаться к определённому объекту. Глобальные переменные не защищены от записи, поэтому люой код
может подменять их значения без вашего ведома.

Решение:
Все реализации сводятся к тому, чтобы скрыть конструктор по умолчанию и создать публичный статический метод, оторый и будет контролировать
жизненный цикл объекта-одиночки.

Если есть доступ к классу одиночки, значит, есть доступ и к этому статическому методу. Он всегда будет отдавать один и тот же объект.