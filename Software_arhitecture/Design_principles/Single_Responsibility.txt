Это наиболее трудно понимаемый принцип. Это, вероятно, из-за названия, которое недостаточно точно соответствует сути.
Вы думаете, что принцип звучит как: Функция должна делать что-то одно и только одно. Но это не является принципом SOLID.
Традиционно принцип описывается так:
Модуль должен иметь одну и только одну причину для изменения.
Или его можно перефразировать следующим образом:
Модуль должен отвечать за одного и только за одного пользователя или заинтересованное лицо.

Признаки нарушения:
1. Непреднамеренное дублирование.
Например, у нас есть класс Employee. Он имеет три метода: calculatePay(), reportHours() и save()
Данный класс нарушает принцип единственной ответственности, потому что три его метода отвечают за три разных актора(группа лиц).
CalculatePay() - это определяется бухгалтерией.
ReportHours() - это определяется отделом по работе с персоналом.
Save() - определяется администраторами баз данных.
А теперь представьте, что разработчики, старающиеся не дублировать код, поместили реализацию двух первых функций в функцию с именем regularHours().

Теперь бухгалтерии нужно внести изменения, разработчик заметил, что функция regularHours() вызывается методом calculatePay(), но, к сожалению,
оне не заметил, что она также вызывается методом reportHours().

В итоге компания понесёт огромные потери, исчисляемые в миллионах долларов, из-за того, что мы вводим в работу код, от которого зависят разные акторы.

2. Слияния
Например, коллектив администраторов бд решил внести исправление в схему таблицы Employee.
Два разных разработика, возможно, из двух разных команд, извлекли класс Employee из репозитория и внесли изменения. К сожалению, их изменения оказались
несовместимыми. В результате потребовалось выполнить слияние.

Решения:
1.Наиболее очевидным, пожалуй, является решение, связанное с отделением данных от функций.
Каждый класс ключает только исходный код для конкретной функции. Все классы не зависят друг от друга.
То есть, исключается дублирование.

Недостаток - разработчик должен создавать экземпляры трёх классов.