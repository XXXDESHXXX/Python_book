В чём привлекательность архитектуры?
Очевидно, это структура. Структура - это то, что доминирует над парадигмами и суждениями в мире разработке ПО.
Конкретный способ визуализации архитектуры ПО - не более чем частный выбор. Этот выбор основан на множестве различных вариантов, но никакой взгляд не
имеет никаких преимуществ перед другим.

Архитектура отражает важные проектные решения по формированию системы, где важность определяется стоимостью изменений.
Архитектура ПО ни на что не похожа!
Хоть, возможно, и не стоит говорить о законах физики и физический масштабах архитектуры ПО, но у нас есть некоторые физические ограничения.
Скорость работы процессора и пропускная способность могут вынести суровый приговор производительности. Объём памяти и дискового пространства может ограничить амбиции любого программного кода.

Самая близкая материя к ПО - это мечта, но ПО приходится работать в реальном мире.

Время, деньги, трудозатраты - это ещё одна система координат, помогающая нам лучше различать большое и малое и отделять относящееся к архитектуре от всего остального.
Данная система помогает нам определить хорошая структура или нет.
!!!Если вы задаётесь вопросом: "Каким наиболее простым способом можно определить хорошая архитектура или нет?", то вот ответ:
Хорошая архитектура отвечает потребностям пользователей, разработчиков и владельцев не только сейчас, но и продолжит отвечать в будущем.!!!
Если вы думаете, что хорошая архитектура стоит дорого, попробуйте плохуя архитектуру.

Наши изменения не должны быть дорогостоящими, сложными в реализации; они должны укладываться в график развития проекта и в рамки дневных или недельных заданий.
Но это ведёт к большой проблеме: путешествиям по времени.
Как узнать, какие типичные изменения будут происходить, чтобы на основе этого знания принять важные решения?
Как уменьшить трудозатраты и стоимость разработки без машины времени и гадания на кофейной гуще?

Архитектура - это набор верных решений, которые хотелось бы принять на ранних этапах работы над проектом, но которые не более вероятны, чем другие.
Анализ прошлого сложен; понимание настоящего в лучшем случае переменчиво; предсказание будущего нетривиально

Хорошая архитектура основывается скорее на понимании движения к цели как непрерывного процесса исследований, а не на понимании самой цели как зафиксированного артефакта.

Архитектура - это гипотеза, которую требуется доказать реализацией и оценкой.

!!!Все архитектуры подчиняются одним и тем же правилам!!!
Хоть все системы радикально отличаются друг от друга, но правила создания архитектур не зависят от любых других переменных!
Да, программы стали больше. Программное обеспечение также стало значительно более призводительным.
Но важное сходство современного программного обеспечения и прошлого программного обеспечения: и то и другое сделано из одного и того же материала.
Мы до сих пор используем инструкции if else и инструкции присваивания, циклы while.
!!!Неважно, на каком языке программировал программист Java или Fortran, всегда потребуется некоторое количество времени, чтобы писать один и тот же код.!!!

Неизменность принципов программирования - это причина общности правил построения программных архитектур для систем самых разных типов.
Правила определяют последовательность и порядок компоновки программ из строительных блоков. И поскольку сами строительные блоки не меняются и являются универсальными,
правила их компоновки также являются универсальными и постоянными.

Единственное, что изменилось с течением времени - это опыт разработчиков, разработчик в 1966 году нарушал правила снова и снова, так как просто не знал их.
Теперь, спустя полвека, мы знаем и понимаем правила.

Правильный код - это когда код не требует больших трудозатрат на своё создание и сопровождение. Изменения вносятся легко и быстро. Ошибки немногочисленны.
Трудозатраты минимальны, а функциональность и гибкость - максимальны.
Хоть последние две строки и кажутся утопией, но это действительно так. И каждый программист может оказаться на земле обетованной.


