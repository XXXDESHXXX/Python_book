Что такое дизайн? Что такое архитектура? Чем они различаюся?

Можно утверждать, что между этими понятиями нет никакой разницы. Вообще никакой.

Да, можно сказать, что архитектура часто используется в контексте общих рассуждений, когда не затрагиваются низкоуровневые детали, а слово "дизайн" обычно
подразумевает организацию и решения на более низком уровне. Но такое разделение бессмысленно, когда речь идёт о том, что делает настоящих архитектор.

Например, мы можем взять архитектора, спроектировавшего новый дом. Этот дом имеет архитектуру? Конечно! А в чём выражается эта архитектура? Это форма дома, внешний вид, уступы, а также расположение комнат
и организация пространства внутри. Но когда я рассматривал чертежи, созданные архитектором, я увидел на них массу деталей. Я увидел, где будут находиться узел отопления, а также местоположение и размеры
водонагревательного котла и насоса. Я увидел подробное описание, как должны конструироваться стены, крыша и фундамент.

Проще говоря, я увидел все мелкие детали, поддерживающие все высокоуровневые решения. А вместе низкоуровневые и высокоуровневые решения составляют дизайн дома.

Это же относится и к архитектуре ПО. Низкоуровневые и высокоуровневые структуры являются частями одного целого. Они и определяют форму системы.
Одно без другого просто невозможно; нет никакой чёткой линии, которая разделяла бы их. Есть просто совокупность решений разного уровня детализации.

Цель? В чём состоит цель таких решений, цель хорошего дизайна ПО? Главная цель - не что иное, как следующее утопическое описание:
Мерой качества дизайна может служить простая мера трудозатрат, необходимых для удовлетворения потребностей клиента.
Если трудозатраты невелики - дизайн хороший, если же с выходом каждой новой версии трудозатраты увеличиваются, система имеет плохой дизайн.

Цель архитектуры ПО - уменьшить человеческие трудозатраты на создание и сопровождение системы.

Что не так?
медленный и постоянных побеждает в гонке
в гонке всегда побеждает быстрейший, а в битве - сильнейший
чем больше ты спешишь, тем меньше успеваешь

Самая распостранённая ошибка - это откладывание проблем, ошибок и рефакторинга на потом. Код всегда должен быть чистым!

Грязный код - ломает систему, только чистый код может работать в долгой перспективе.

Создание беспорядка в коде всегда оказывается медленнее, чем неуклонное соблюдение чистоты, независимо от выбранного масштаба времени.
