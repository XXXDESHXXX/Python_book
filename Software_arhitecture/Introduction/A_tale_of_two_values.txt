Всякая программная система имеет две разные ценности: поведение и структуру. Разработчики отвечают за обе ценности. Но часто, к сожалению, они сосредотачиваются на чём-то одном.

Поведение - первая ценность ПО. Её смысл в том, чтобы заставить компьютеры приносить прибыль заинтересованной стороне или экономить деньги.
Если вы думаете, что ваша задача - заставлять компьютеры соответсвовать требованиям и исправлять ошибки - вы жестоко ошибаетесь.

Архитектура - вторая ценность ПО. Её смысл в том, чтобы дать простую возможность изменять поведение компьютеров.
Для достижения этой цели ПО должно быть податливым - то есть должна быть возможность легко изменить его.
Когда заинтересованные стороны меняют своё мнение о некоторой особенности, приведение её в соответствие с пожеланиями заинтересованной стороны должно быть простой задачей.
Сложность должна быть пропорциональна лишь масштабу изменения, но никак не его форме!

Именно эта разница между масштабом и формой является причиной роста стоимости разработки ПО.

Проблема кроется в архитектуре системы. Чем чаще архитектура отдаёт предпочтение какой-то одной форме, тем выше вероятность, что встраивание новых особенностей в эту структуры будет
даваться всё сложнее и сложнее.

!!!Архитектуры должны быть максимально независимыми от формы!!!

Что представляет большую ценность, функциональность или архитектура?
Важнее правильная работа? Это неправильное мнение, и вот почему:

Если правильно работающая программа не допускает возможности её изменения, она перестанет работать правильно, когда изменятся требования, и вы не сможете заставить её работать правильно.

Если программа работает неправильно, но легко поддаётся изменению, вы сможете заставить работать её правильно и поддерживать её работоспособность по мере изменения требований.
Любую систему можно довести до такого состояния, когда стоимость изменений превышает разумные пределы.

Для определения приоритета можно воспользоваться матрицей Эйзенхауэра:
У меня есть два вида дел, срочные и важные. Срочные дела, как правило, не самые важные, а важные - не самые срочные.

Поведение - срочное, но не всегда важное
Архитектура - важное, но не всегда срочное
Любой разработчик должен подчёркивать приоритет важности архитектуры перед срочностью поведения.

Любой разработчик участвует в битве за архитектуру, так как вы тоже являетесь заинтересованной стороной.