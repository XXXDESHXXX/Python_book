Что такое ОО?
Комбинация данных и функций? Тогда o.f() - это нечто отличное от f(o)
Способ моделирования реального мира? Это слишком уклончивый ответ. Зачем нам моделировать реальный мир?
ОО делает ПО проще для понимания? Такоя объяснение не отвечает на вопрос, что такое ОО.

Возможно, чтобы объяснить природу ОО можно прибегнуть 3 основных принципа:
Инкапсуляция, наследование и полиморфизм.

Инкапсуляция
Эта идея не уникальна для ОО. Например, в языке C имеется превосходная поддержка инкапсуляции.

ОО не зависит от строгой инкапсуляции. В действительности многие языки программирования, заявляющие о поддержке ОО, практически не имеют превосходную инкапсуляцию.

Наследование
Языки ОО дали нам наследование? Точнее - её разновидность. По сути, наследование - это всего лишь повторное объявление группы переменных и функций
в ограниченной области видимости. Но нечто похожее было реализовано в C, задолго до появления языков OO.

Полиморфизм
И снова эта "особенность" ОО могла быть реализована в C

Суть полиморфизма заключается в примении указателей на функции. Программисты использовали указатели на функции для достижения полиморфного поведения ещё со времён
появления архитектуры фон Неймана в конце 1940-х годов.

Что такое ОО? Однако ответ очевиден:
ОО даёт, посредством поддержки полиморфизма, абсолютный контроль над всеми зависимостями в исходном коде.
Это позволяет архитектору создать архитектуру со сменными модулями, в которой модули верхнего уровня не зависят от модулей нижнего уровня.