При автоматизации очень часто надо будет работать со строками, так как конфигурационный файл, вывод команд и отправляемые команды - это строки.
Знание различных методов (действий), которые можно применять к строкам, помогает более эффективно работать с ними.
Строки - неизменяемый тип данных. Поэтому все методы, которые преобразуют строку, возвращают новую строку, а исходная строка остается неизменной.
1. Метод join.
Пример:
vlans = ['10', '20', '30']
','.join(vlans)
out: '10,20,30'
2. Методы преобразование регистра строки:
string1 = 'FastEthernet'
string1.upper()
out: 'FASTETHERNET'

string1.lower()
out: 'fastethernet'

string1.swapcase()
out:'fASTeTHERNET'

string2 = 'tunnel 0'
string2.capitalize()
out: 'Tunnel 0'

Примечание!
Очень важно обращать внимание на то, что часто методы возвращают преобразованную строку. И значит, надо не забыть присвоить её какой-то переменной(можно той же).
string1 = string1.upper()
out: FASTETHERNET
3. Метод Count.
Используется для подсчёта того, сколько раз символ или подстрока встречаются в строке:
string1  'Hello, hello, hello, hello'
string1.count('hello')
out: 3
4. Метод find.
Методу find() можно передать подстроку или символ, и он покажет, на какой позиции находится первый символ подстроки(для первого совпадения):
string1 = 'interface FastEthernet0/1'
string1.find('Fast')
out: 10
string1[string1.find('Fast')::]
out: 'FastEthernet0/1'
Если совпадение не найдено метод find возвращает -1.
5. Методы startswith(), endswith().
string1 = 'FastEthernet0/1'
string1.startswith('Fast')
out: True

string1.endswith('0/1')
out: False
Примечание!
Оба метода чувствительны к регистру!
6. Метод replace
Замена последовательности символов в строке на другую последовательность.
string1 = 'FastEthernet0/1'
string1.replace('Fast', 'Gigabit')
out: 'GigabitEthernet0/1'
7. Метод strip
В конце каждой строки, как правило, есть какие-то спецсимволы(а могут быть и в начале). Например, перевод строки.
string1 = '\n\tinterface FastEthernet0/1\n'
string1.strip()
out: 'interface FastEtherne0/1'
По умолчанию убирает пробельные символы:
- \t\n\r\f\
Данному методу можно передать как аргумент любые символы. Тогда они будут удалены в начале и в конце строки.
ad_metric = '[110/1045]'
ad_metric.strip('[]')
out: '110/1045'
Если нужно убрать символ только в начале и в конце, можно использовать, соответственно, методы lstrip(), rstrip().
8. Метод split
Данный метод разбивает строку на части, используя как разделитель какой-то символ(или символы) и возвращает список строк:
string1 = 'switchport trunk allowed vlan 10,20,30,100-200'
commands = string1.split()
out: ['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200']
По умолчанию в качестве разделителя используются пробельные символы (пробелы, табы, перевод строки), но в скобках можно указать любой разделитель.
У метода split() есть ещё одна хорошая особенность: по умолчанию метод разбивает строку не по одному пробельному символу, а по любому количеству.
