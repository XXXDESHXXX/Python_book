Строка в python это:
- последовательность символов, заключенная в кавычки
- неизменяемый упорядоченный тип данных
Примеры строк:
my_string = 'Hello' - строка с 5 символами
null_string = '' - пустая строка
big_string = 'This string is big' \ - строки можно переносить, таким образом можно записывать целый текст в переменную
              And i know it'
Операции со строками:
1. Присваивание
my_string = 'interface'
2. Конкатенация
Конкатенация в python реализована различными методами. Основными из них являются:
1) Конкатенация с помощью оператора +.
Пример:
my_string = 'face'
dop_string = 'beautiful '
result = my_string + dop_string
out: beautiful face
Данный оператор не рекомендуется использовать так как у данного метода есть существенные недостатки:
- При использовании оператора + выделяется память для КАЖДОЙ КОНКАТЕНАЦИИ!
- Скорость данного метода является очень медленной при работе с большими строками или с большим количеством строк.
2) Конкатенация с помощью метода .join().
Данный метод является основным методом реализации конкатенации, так как он в 4 раза эффективнее чем оператор +.
Рассмотрим сравнение этих двух методов в данном примере:
Задание:
Объединить несколько строк в списке:
strs = ['Life', 'is', 'short,', 'I', 'use', 'Python']
Решение данного задания с помощью оператора +:
def join_strs(strs):
    result = ''
    for s in strs:
        result += ' ' + s
    return result[1:]
join_strs(strs)
Логика данного решения:
- Для каждого цикла строка ищется в списке.
- Управляющая программа Python интерпретирует выражение result += ' ' + s и обращается за адресом памяти для пробела ' '.
- Затем управляющая программа понимает, что пробел нужно объединять со строкой, поэтому она обращается за адресом памяти для строки s (“Life” в первом цикле).
- Для каждого цикла управляющей программе приходится дважды обращаться за адресом памяти: сначала для пробелов, потом для строки.
В итоге выделение памяти происходит 12 раз.
Решение с помощью метода .join():
def join_strs_better(strs):
    return ' '.join(strs)
Логика данного решения:
- Управляющая программа считает строки, в данном примере их 6.
- Это означает, что строку, используемую для объединения, нужно повторить 6-1=5 раз.
- Программа знает, что нужно 11 областей в памяти, поэтому все они применяются одновременно и размещаются заранее.
- Строки расставляются по порядку, выдаётся результат.
Поскольку метод .join() является строковым объектом, этот объект используется для объединения всех строк в списке, поэтому не нужно создавать пробел в начале строки.
3. Умножение строк.
Пример:
my_str = '#' * 40
out : '########################################'
4. Операция обращения по индексу.
Так как строки являются упорядоченным типом данных, это позволяет обращаться к символам в строке по номеру, начиная с нуля.
my_str = '123'
my_str[0]
out: '1'
Допустимо указывать и отрицательные значения номера
my_str[-1]
out: '3'
5. Срезы строк.
Пример:
my_str = 'inter'
my_str[0:3]
out: 'int'
Если второе число в срезе не указано, то срез будет до конца строки.
Срез можно использовать и с конца строки:
my_str = 'different'
my_str[-3:]
out: 'ent'
Также в срезе можно указывать шаг.
Так можно получить нечётные числа:
str = '0123456789'
str[1::2]
out: '13579'
Таким образом все чётные числа:
str[::2]
out: '02468'
Срезы можно использовать для получения строки в обратном порядке.
Пример:
str[::-1]
out: '9876543210'
Примечание!
Записи a[::] и a[:] дают одинаковый результат, но двойное двоеточие позволяет указывать, что надо брать не каждый элемент, а, например, каждый второй.
6. Использование функции len()
Функция len() позволяет получить количество символов в строке:
str = 'line'
len(str)
out: 4
Примечание!
Функция и метод отличаются тем, что метод привязан к объекту конкретного типа, а функция, как правило, более универсальная и может применяться к объектам разного типа.
Например, функция len может применяться к строкам, спискам, словарям и так далее, а метод startswith относится только к строкам.
