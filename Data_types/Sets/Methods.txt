Существуют различные методы для работы со множествами.
- Для добавления элементов во множество используется метод add():
users = set()
users.add('Sam')
print(users)
out: {'Sam'}
- Для удаления элементов из множества используется метод remove(), в который передаётся удаляемый элемент.
Если не передавать никакого аргумента, то будет сгенерирована ошибка.
Поэтому перед удалением элемента из множества следует проверить наличие элемента с помощью оператора in.
users = {'Tom', 'Bob', 'Alice'}
user = 'Tom'
if user in users:
    users.remove(user)
print(users)
out: {'Bob', 'Alice'}
- Для удаления можно также использовать метод discard(), который не будет генерировать исключения при отсутствии элемента.
users = {'Tom', 'Bob', 'Alice'}
users.discard('Tim')
print(users)
out: {'Tom', 'Bob', 'Alice'}
- Для удаления всех элементов вызывается метод clear():
users.clear()
out: {}
- Для копирования содержимого множества используется метод copy()
user = {'Tom', 'Bob', 'Alice'}
students = users.copy()
print(students)
out: {'Tom', 'Bob', 'Alice'}
- Для объединения множеств используется метод union()
users = {'Tom', 'Bob', 'Alice'}
users2 = {'Sam', 'Kate', 'Bob'}
users3 = users.union(users2)
print(users3)
out: {'Bob', 'Alice', 'Sam', 'Kate', 'Tom'}
- Пересечение множеств intersection()
intersection_update() - заменяет пересечёнными элементами первое множество.
- Разность множеств difference()
Разность множеств возвращает те элементы, которые есть в первом множестве, но отсутствуют во втором.
Отношения между множествами:
- Метод issubset() позволяет выяснить, является ли текущее множество подмножеством (то есть частью) другого множества.
- Метод issuperset() позволяет выяснить, является ли текущее множество надмножеством (то есть содержит) другое множество.
