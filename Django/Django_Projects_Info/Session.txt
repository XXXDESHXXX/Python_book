При входе пользователей на сайт их анонимный сеанс теряется, и создаётся новый сеанс для аутентифицированных пользователей. Если в анонимном сеансе хранятся элементы, которые необходимо сохранить
после входа пользователя в систему, то придётся копировать данные старого сеанса в новый сеанс. Это делается путём извлечения
сеансовых данных перед входом пользователя в систему с помощью функции login(), встроенный в Django системы аутентификации,
и сохранения их в сеансе после этого.
Настроечные параметры:
- сеансы на основе базы данных: сеансовые данные хранятся в бд.
- сеансы на основе файлов: сеансы хранятся в файловой системе.
- сеансы на основе кеша: сеансовые данные хранятся в кеш-памяти.
- кешированные сеансы на основе базы данных: сеансовые данные хранятся в кеше со сквозной записью и в базе данных.
- сеансы на основе cookie-файлов: сеансовые данные хранятся в cookie-файлах.
 В целях повышения производительности следует использовать сеансовый механизм на основе кеша. Django поддерживает кеш-бэкенд Memcached прямо
«из коробки», при этом еще имеются сторонние механизмы кеширования для Redis и других систем кеширования.