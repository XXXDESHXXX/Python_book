Django подчиняется шаблону архитектурного дизайна MTV(Model-Template-View). Этот шаблон похож на MVC(Model-View-Controller), где Template
(Шаблон) действует как View(Представление), а сам веб-фреймворк действует как Controller(Контроллер).
Обязанности в шаблоне MTV распределены следующим образом:
1) модель - определяет логическую структуры данных и является обработчиком данных между базой данных и их представлением.
2) шаблон - это слой представления. В Django используется система текстовых шаблонов, в которой хранится всё, что браузер прорисовывает на страницах.
3) представление - взаимодействует с базой данных через модель и передаёт данные в шаблон для их прорисовки и просмотра.
Сам веб-фреймворк выступает в качестве контроллера. Он отправляет запрос в надлежащее представление в соответствии с конфигурацией URL-адреса.
Архитектура Django:
HTTP-запрос:
Веб-браузер -> Диспетчер URL-адресов -> Представление -> Модель -> База данных
HTTP-ответ:
База данных -> Модель -> Представление -> Шаблон -> Веб-браузер
Вот как Django оперирует HTTP-запросами и генерирует ответы:
1. Веб-браузер запрашивает страницу по ее URL-адресу, и веб-сервер передает HTTP-запрос веб-фреймворку Django.
2. Django просматривает свои сконфигурированные шаблоны URL-адресов
и останавливается на первом, который совпадает с запрошенным URL адресом.
3. Django исполняет представление, соответствующее совпавшему шаблону URL-адреса.
4. Представление потенциально использует модели данных, чтобы извлекать информацию из базы данных.
5. Модели данных обеспечивают определение данных и  их поведение.
Они используются для запроса к базе данных.
6. Представление прорисовывает шаблон (обычно с  использованием HTML), чтобы отображать данные на странице, и возвращает их вместе
с HTTP-ответом.
Пакет состоит из следующих ниже файлов:
- __init__.py: пустой файл, который сообщает Python, что каталог нужно трактовать как модуль Python.
- asgi.py: конфигурация для выполнения проекта в качестве приложения работающего по протоколу интерфейса шлюза асинхранного сервера (ASGI).
- settings.py: здесь указаны настроечные параметры и конфигурация проекта и содержатся параметры со значениями, используемыми по умолчанию.
- urls.py: место, где располагаются ваши шаблоны URL-адресов. Каждый URL-адрес, который определён здесь, относится с представлением.
- wsgi.py: конфигурация для выполнения проекта в качестве приложения, работающего по протоколу интерфейса шлюза веб-сервера (WSGI) с WSGI-совместимыми веб-серверами.
Параметры settings.py:
DEBUG - Это булев параметр, который включает и выключает режим отладки проекта. При переходе в производственную среду всегда назначать False.
Иначе вы предоставите конфиденциальные данные, связанные с проектом.
ALLOWED_HOSTS - не применяется при включённом режиме отладки или при выполнении тестов. При перенесении своего сайта в прозводственную среду и установке парамера DEBUG равным
False в этот настроечный параметр следует добавлять свои домен/хост, чтобы разрешить ему раздавать ваш сайт Django.
INSTALLED_APPS - это параметр, который придётся редактировать во всех проектах. Он сообщает Django о приложениях, которые для этого сайта являются активными.
По умолчанию Django вставляет следующие ниже приложения:
- django.contrib.admin: сайт администрирования;
– django.contrib.auth: фреймворк аутентификации;
– django.contrib.contenttypes: фреймворк типов контента;
– django.contrib.sessions: фреймворк сеансов;
– django.contrib.messages: фреймворк сообщений;
– django.contrib.staticfiles: фреймворк управления статическими файлами.
MIDDLEWARE - подлежащие исполнению промежуточные программные компоненты.
ROOT_URLCONF - указывает модуль Python, в котором определены шаблоны корневых URL-адресов приложения.
DATABASES - словарь, содержащий настроечные параметры всех баз данных, которые будут использоваться в проекте. Всегда должна существовать
база данных, которая будет использоваться по умолчания, в стандартной конфигурации используется база данных SQLite3, если не указана идея.
LANGUAGE_CODE - определяет заранее заданный языковой код этого сайта Django.
USE_TZ - сообщает Django, что нужно активировать/деактивировать поддержку часовых поясов. По умолчанию True.
Проект - установленный веб-фреймворк Django с несколькими настроечными параметрами.
Приложение - это группа моделей, шаблонов, URL-адрсов и представлений. Приложения взаимодействуют с веб-фреймворком с целью обеспечения определённых
функциональностей.
Структура проекта/приложений Django:
Проект DJANGO:
- Приложение 1
- Приложение 2
- Приложение 3
.
.
.
- Приложение N
Базовая структура приложения:
• __init__.py: пустой файл, который сообщает Python, что каталог blog
нужно трактовать как модуль Python;
• admin.py: здесь вы регистрируете модели, чтобы включать их в состав
сайта администрирования – этот сайт используется опционально, по
вашему выбору;
• apps.py: содержит главную конфигурацию приложения blog;
• migrations: этот каталог будет содержать миграции базы данных приложения. Миграции позволяют Django отслеживать изменения модели
42 Разработка приложения для ведения блога
• models.py: содержит относимые к приложению модели данных; все приложения Django должны иметь файл models.py, но его можно оставлять
пустым;
• tests.py: здесь можно добавлять относимые к приложению тесты;
• views.py: здесь расположена логика приложения; каждое представление
получает HTTP-запрос, обрабатывает его и возвращает ответ.
ORM(object-relational mapper) - это мощный инструмент API абстракции базы данных, который позволяет легко создавать, извлекать, обновлять и
удалять объекты.