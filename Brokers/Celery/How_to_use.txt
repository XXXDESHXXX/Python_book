import os
from celery import Celery
# задать стандартный модуль настроек Django
# для программы 'celery'.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myshop.settings')
app = Celery('myshop')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()
задается переменная DJANGO_SETTINGS_MODULE для встроенной в  Celery
программы командной строки;
• посредством инструкции app = Celery('myshop') создается экземпляр
приложения;
• используя метод config_from_object(), загружается любая конкретноприкладная конфигурация из настроек проекта. Атрибут namespace задает префикс, который будет в  вашем файле settings.py у  настроек,
связанных с Celery. Задав именное пространство CELERY, все настройки
Celery должны включать в  свое имя префикс CELERY_ (например, CELERY_BROKER_URL);
• наконец, сообщается, чтобы очередь заданий Celery автоматически обнаруживала асинхронные задания в  ваших приложениях. Celery будет
искать файл tasks.py в каждом каталоге приложений, добавленных в INSTALLED_APPS, чтобы загружать определенные в нем асинхронные задания
Для Celery следует создавать отдельный модуль celery.py в главном каталоге, а также нужно добавить Celery в __init__.py

Параметр CELERY_ALWAYS_EAGER позволяет исполнять задания в синхронном режиме, не отправляя их в очередь. Это удобно при выполнении модульных тестов или исполнении
приложения в локальной среде без запуска программы Celery.