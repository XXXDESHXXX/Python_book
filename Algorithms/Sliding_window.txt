Метод скользящего окна - это алгоритм, целью которого является сокращение использование вложенных циклов и замена их одним циклом.
Условие для использования алгоритма:
- Размер окна для вычислений фиксируется на протяжении всего вложенного цикла.
Общее использоваие метода скользящего окна:
- найти необходимый размер окна.
- вычислить результат для 1-го окна, т.е. от начала структуры данных.
- использовать цикл, чтобы сдвинуть окно на 1, и продолжать вычислять результат окно за окном.
Задача: Учитывая массив целых чисел размера 'n', Наша цель состоит в том, чтобы вычислить максимальную сумму 'k' последовательных элементов в массиве.
Итеративный метод:
# code
import sys

# O(n * k) solution for finding
# maximum sum of a subarray of size k
INT_MIN = -sys.maxsize - 1

# Returns maximum sum in a
# subarray of size k.


def maxSum(arr, n, k):

    # Initialize result
    max_sum = INT_MIN

    # Consider all blocks
    # starting with i.
    for i in range(n - k + 1):
        current_sum = 0
        for j in range(k):
            current_sum = current_sum + arr[i + j]

        # Update result if required.
        max_sum = max(current_sum, max_sum)

    return max_sum


# Driver code
arr = [1, 4, 2, 10, 2,
       3, 1, 0, 20]
k = 4
n = len(arr)
print(maxSum(arr, n, k))

# This code is contributed by mits
Временная сложность: O(k*n), так как содержит два вложенных цикла.
Решение данной задачи с использованием метода скользящего окна:
Применение техники раздвижного окна:
- Мы вычисляем сумму первых k элементов из n членов, используя линейный цикл, и сохраняем сумму в переменной window_sum.
- Затем мы будем линейно пасться по массиву, пока он не дойдет до конца, и одновременно будем следить за максимальной суммой.
- Чтобы получить текущую сумму блока из k элементов, просто вычтите первый элемент из предыдущего блока и добавьте последний элемент текущего блока.

# O(n) solution for finding
# maximum sum of a subarray of size k


def maxSum(arr, k):
    # length of the array
    n = len(arr)

    # n must be greater than k
    if n < k:
        print("Invalid")
        return -1

    # Compute sum of first window of size k
    window_sum = sum(arr[:k])

    # first sum available
    max_sum = window_sum

    # Compute the sums of remaining windows by
    # removing first element of previous
    # window and adding last element of
    # the current window.
    for i in range(n - k):
        window_sum = window_sum - arr[i] + arr[i + k]
        max_sum = max(window_sum, max_sum)

    return max_sum


# Driver code
arr = [1, 4, 2, 10, 2, 3, 1, 0, 20]
k = 4
print(maxSum(arr, k))

# This code is contributed by Kyle McClay
Временная сложность равна O(n).